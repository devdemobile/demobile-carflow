
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://ydvykagsvazvjqkncjxc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlkdnlrYWdzdmF6dmpxa25janhjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc0MDY2NDMsImV4cCI6MjA2Mjk4MjY0M30.szzlxoiGwG8T-I1Nf8nTBK4B6zuTfWkdSVMgHXdWuPk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storage: localStorage
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
        'X-Client-Info': '@supabase/js'
      }
    },
    db: {
      schema: 'public'
    },
    realtime: {
      timeout: 30000
    }
  }
);

// Função para verificar se o cliente está autenticado
export const isAuthenticated = async (): Promise<boolean> => {
  const { data } = await supabase.auth.getSession();
  return !!data.session;
};

// Função para obter o ID do usuário atual
export const getCurrentUserId = async (): Promise<string | null> => {
  const { data } = await supabase.auth.getSession();
  return data.session?.user?.id || null;
};

// Função para testar conexão e configuração do Supabase
export const testSupabaseConnection = async (): Promise<boolean> => {
  try {
    console.log("Testando conexão com o Supabase...");
    const { data, error } = await supabase.from('system_users').select('id').limit(1);
    
    if (error) {
      console.error("Erro na conexão com o Supabase:", error);
      return false;
    }
    
    console.log("Conexão com o Supabase bem-sucedida:", data);
    return true;
  } catch (e) {
    console.error("Exceção ao testar conexão com o Supabase:", e);
    return false;
  }
};

// Função para tentar login direto com o Supabase Auth
export const directSupabaseLogin = async (email: string, password: string): Promise<{success: boolean, userId: string | null, error: any}> => {
  try {
    // Primeiro tentamos com o email como está
    let { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    // Se falhar com o email original, tentamos adicionando um domínio sintético
    // (caso o usuário tenha passado apenas um username)
    if (error && !email.includes('@')) {
      const syntheticEmail = `${email}@example.com`;
      console.log("Tentando login com email sintético:", syntheticEmail);
      
      const result = await supabase.auth.signInWithPassword({
        email: syntheticEmail,
        password
      });
      
      data = result.data;
      error = result.error;
    }

    if (error) {
      console.error("Erro no login direto com Supabase:", error);
      return { success: false, userId: null, error };
    }

    console.log("Login direto com Supabase bem-sucedido:", data.user?.id);
    return { success: true, userId: data.user?.id || null, error: null };
  } catch (e) {
    console.error("Exceção no login direto com Supabase:", e);
    return { success: false, userId: null, error: e };
  }
};
