// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://ydvykagsvazvjqkncjxc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlkdnlrYWdzdmF6dmpxa25janhjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc0MDY2NDMsImV4cCI6MjA2Mjk4MjY0M30.szzlxoiGwG8T-I1Nf8nTBK4B6zuTfWkdSVMgHXdWuPk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    global: {
      headers: {
        'Content-Type': 'application/json',
        'X-Client-Info': '@supabase/js'
      }
    },
    db: {
      schema: 'public'
    }
  }
);

// Função para testar conexão e configuração do Supabase
export const testSupabaseConnection = async (): Promise<boolean> => {
  try {
    console.log("Testando conexão com o Supabase...");
    const { data, error } = await supabase.from('system_users').select('id').limit(1);
    
    if (error) {
      console.error("Erro na conexão com o Supabase:", error);
      return false;
    }
    
    console.log("Conexão com o Supabase bem-sucedida:", data);
    return true;
  } catch (e) {
    console.error("Exceção ao testar conexão com o Supabase:", e);
    return false;
  }
};

// Função para verificar se o cliente está autenticado
export const isAuthenticated = async (): Promise<boolean> => {
  const { data } = await supabase.auth.getSession();
  return !!data.session;
};

// Função para obter o ID do usuário atual
export const getCurrentUserId = async (): Promise<string | null> => {
  const { data } = await supabase.auth.getSession();
  return data.session?.user?.id || null;
};

// Função para tentar login direto com o Supabase Auth
export const directSupabaseLogin = async (username: string, password: string): Promise<{success: boolean, userId: string | null, error: any}> => {
  try {
    console.log("Tentando login direto com Supabase Auth...");
    
    // Primeiro verificamos se o usuário existe na tabela system_users
    const { data: userData, error: userError } = await supabase
      .from('system_users')
      .select('id, email, username')
      .eq('username', username)
      .single();
    
    if (userError) {
      console.error("Erro ao buscar usuário na tabela system_users:", userError);
      return { success: false, userId: null, error: userError };
    }
    
    if (!userData) {
      console.log("Usuário não encontrado na tabela system_users");
      return { success: false, userId: null, error: new Error("Usuário não encontrado") };
    }
    
    console.log("Usuário encontrado na tabela system_users:", userData);
    
    // Verificar a senha usando a função verify_password
    const { data: verifyResult, error: verifyError } = await supabase.rpc('verify_password', {
      username: username,
      password_attempt: password
    });
    
    if (verifyError || !verifyResult) {
      console.error("Erro ao verificar senha:", verifyError || "Senha inválida");
      return { success: false, userId: null, error: verifyError || new Error("Senha inválida") };
    }
    
    console.log("Senha verificada com sucesso para o usuário:", userData.id);
    
    // Definir email para uso na autenticação do Supabase
    const email = userData.email || `${username}@example.com`;
    
    // Tentar fazer login com o Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: email,
      password: password
    });
    
    if (authError) {
      console.log("Erro no login com Supabase Auth:", authError);
      
      // Se o erro for de credenciais inválidas e a senha foi verificada corretamente,
      // talvez o usuário não exista no auth.users. Vamos tentar criar.
      if (authError.message.includes("Invalid login credentials")) {
        console.log("Tentando criar usuário no Supabase Auth...");
        
        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
          email: email,
          password: password,
          options: {
            data: {
              username: username,
              system_user_id: userData.id
            }
          }
        });
        
        if (signUpError) {
          console.error("Erro ao criar usuário no Supabase Auth:", signUpError);
          return { success: false, userId: null, error: signUpError };
        }
        
        console.log("Usuário criado com sucesso no Supabase Auth:", signUpData);
        
        // Tentar login novamente após criar o usuário
        const { data: retryAuth, error: retryError } = await supabase.auth.signInWithPassword({
          email: email,
          password: password
        });
        
        if (retryError) {
          console.error("Erro no segundo login após criar usuário:", retryError);
          return { success: false, userId: null, error: retryError };
        }
        
        console.log("Login bem-sucedido após criar usuário:", retryAuth);
        return { success: true, userId: userData.id, error: null };
      }
      
      return { success: false, userId: null, error: authError };
    }
    
    console.log("Login direto com Supabase Auth bem-sucedido:", authData.user?.id);
    return { success: true, userId: userData.id, error: null };
  } catch (e) {
    console.error("Exceção no login direto com Supabase:", e);
    return { success: false, userId: null, error: e };
  }
};
